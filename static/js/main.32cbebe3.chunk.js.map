{"version":3,"sources":["const.ts","api.ts","User.tsx","Comment.tsx","CommentList.tsx","Post.tsx","PostList.tsx","App.tsx","index.tsx"],"names":["EMPTY_USER","id","name","email","address","city","loadFromServer","url","a","async","fetch","response","json","User","user","className","Comment","comment","body","CommentList","comments","map","key","Post","post","title","PostList","posts","App","useState","setPosts","isStarted","setIsStarted","isLoading","setIsLoading","error","setError","filteredPosts","setFilteredPosts","normalizePosts","postsList","usersList","commentsList","filter","postId","find","userId","loadPosts","Promise","all","postsData","message","disabled","type","onClick","debounceTimeout","placeholder","onChange","e","searchQuery","target","value","trim","toLowerCase","includes","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.32cbebe3.chunk.js","sourcesContent":["export const POSTS_URL = 'https://jsonplaceholder.typicode.com/posts';\nexport const USERS_URL = 'https://jsonplaceholder.typicode.com/users';\nexport const COMMENTS_URL = 'https://jsonplaceholder.typicode.com/comments';\nexport const EMPTY_USER = {\n  id: -1,\n  name: 'No name',\n  email: 'example@email.com',\n  address: {\n    city: 'no city',\n  },\n};\n","export const loadFromServer: (url: string) => Promise<any> = async url => {\n  const response = await fetch(url);\n\n  return response.json();\n};\n","import React from 'react';\nimport { UserInterface } from './interfaces';\n\ninterface Props {\n  user: UserInterface;\n}\n\nconst User: React.FC<Props> = ({ user }) => (\n  <p className=\"post__author\">\n    <span>{user.name}</span>\n    <br />\n    <span>{user.email}</span>\n    <br />\n    <span>{user.address.city}</span>\n  </p>\n);\n\nexport default User;\n","import React from 'react';\nimport { CommentInterface } from './interfaces';\n\ninterface Props {\n  comment: CommentInterface;\n}\n\nconst Comment: React.FC<Props> = ({ comment }) => (\n  <div className=\"comments__item\">\n    <p className=\"comments__text\">{comment.body}</p>\n    <div className=\"comments__author\">\n      <span>{comment.name}</span>\n      <br />\n      <span>{comment.email}</span>\n    </div>\n  </div>\n);\n\nexport default Comment;\n","import React from 'react';\nimport Comment from './Comment';\nimport { CommentInterface } from './interfaces';\n\ninterface Props {\n  comments: CommentInterface[];\n}\n\nconst CommentList: React.FC<Props> = ({ comments }) => (\n  <div className=\"post__comments comments\">\n    <h2 className=\"comments__title\">Comments:</h2>\n    {comments.map(comment => (\n      <Comment key={comment.id} comment={comment} />\n    ))}\n  </div>\n);\n\nexport default CommentList;\n","import React from 'react';\nimport User from './User';\nimport CommentList from './CommentList';\nimport { NormalizedPostInterface } from './interfaces';\n\ninterface Props {\n  post: NormalizedPostInterface;\n}\n\nconst Post: React.FC<Props> = ({ post }) => (\n  <article className=\"post__item\">\n    <h2 className=\"post__title\">{post.title}</h2>\n    <p className=\"post__text\">{post.body}</p>\n    <User user={post.user} />\n    <CommentList comments={post.comments} />\n  </article>\n);\n\nexport default Post;\n","import React from 'react';\nimport Post from './Post';\nimport { NormalizedPostInterface } from './interfaces';\n\ninterface Props {\n  posts: NormalizedPostInterface[];\n}\n\nconst PostList: React.FC<Props> = ({ posts }) => (\n  <section className=\"post__list\">\n    {posts.map(post => (\n      <Post key={post.id} post={post} />\n    ))}\n  </section>\n);\n\nexport default PostList;\n","import React, { useState } from 'react';\nimport { DebounceInput as SearchInput } from 'react-debounce-input';\nimport { POSTS_URL, USERS_URL, COMMENTS_URL, EMPTY_USER } from './const';\nimport { loadFromServer } from './api';\nimport {\n  CommentInterface,\n  NormalizedPostInterface,\n  PostInterface,\n  UserInterface,\n} from './interfaces';\nimport PostList from './PostList';\nimport './App.css';\n\nconst App: React.FC = () => {\n  const [posts, setPosts] = useState<NormalizedPostInterface[]>([]);\n  const [isStarted, setIsStarted] = useState<boolean>(false);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string>('');\n  const [filteredPosts, setFilteredPosts] = useState<NormalizedPostInterface[]>(\n    [],\n  );\n\n  const normalizePosts: (\n    postsList: PostInterface[],\n    usersList: UserInterface[],\n    commentsList: CommentInterface[],\n  ) => NormalizedPostInterface[] = (postsList, usersList, commentsList) =>\n    postsList.map(post => ({\n      ...post,\n      comments: commentsList.filter(comment => comment.postId === post.id),\n      user: usersList.find(user => user.id === post.userId) || EMPTY_USER,\n    }));\n\n  const loadPosts: () => void = async () => {\n    try {\n      setIsLoading(true);\n      setError('');\n\n      const [postsList, usersList, commentsList] = await Promise.all([\n        loadFromServer(POSTS_URL),\n        loadFromServer(USERS_URL),\n        loadFromServer(COMMENTS_URL),\n      ]);\n\n      const postsData: NormalizedPostInterface[] = normalizePosts(\n        postsList,\n        usersList,\n        commentsList,\n      );\n\n      setPosts(postsData);\n      setFilteredPosts(postsData);\n      setIsLoading(false);\n      setIsStarted(true);\n    } catch (e) {\n      setError(e.message);\n      setIsLoading(false);\n    }\n  };\n\n  const filterPosts: (e: React.ChangeEvent<HTMLInputElement>) => void = e => {\n    const searchQuery = e.target.value.trim().toLowerCase();\n\n    setFilteredPosts(\n      posts.filter(post =>\n        (post.title + post.body).toLowerCase().includes(searchQuery),\n      ),\n    );\n  };\n\n  if (error) {\n    return (\n      <div className=\"post__start\">\n        <span className=\"error\">{error}</span>\n        <button\n          disabled={isLoading}\n          className=\"post__button\"\n          type=\"button\"\n          onClick={loadPosts}\n        >\n          {isLoading ? 'Loading...' : 'Try again'}\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      {isStarted ? (\n        <div className=\"post\">\n          <h1 className=\"title\">Dynamic list of posts</h1>\n          <SearchInput\n            className=\"post__search\"\n            debounceTimeout={500}\n            placeholder=\"Type to search...\"\n            onChange={filterPosts}\n          />\n          <PostList posts={filteredPosts} />\n        </div>\n      ) : (\n        <div className=\"post__start\">\n          <button\n            disabled={isLoading}\n            className=\"post__button\"\n            type=\"button\"\n            onClick={loadPosts}\n          >\n            {isLoading ? 'Loading...' : 'Load Posts'}\n          </button>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}