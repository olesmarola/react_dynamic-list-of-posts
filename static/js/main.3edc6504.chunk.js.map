{"version":3,"sources":["api.ts","User.tsx","Comment.tsx","CommentList.tsx","Post.tsx","PostList.tsx","App.tsx","const.ts","index.tsx"],"names":["loadFromServer","url","a","async","fetch","response","json","User","user","className","name","email","address","city","Comment","comment","body","CommentList","comments","map","key","id","Post","post","title","PostList","posts","App","useState","setPosts","isStarted","setIsStarted","isLoading","setIsLoading","error","setError","filteredPosts","setFilteredPosts","normalizePosts","postsList","usersList","commentsList","filter","postId","find","userId","loadPosts","Promise","all","postsData","message","disabled","type","onClick","debounceTimeout","placeholder","onChange","e","searchQuery","target","value","trim","toLowerCase","includes","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3edc6504.chunk.js","sourcesContent":["export const loadFromServer: (url: string) => Promise<any> = async url => {\n  const response = await fetch(url);\n\n  return response.json();\n};\n","import React from 'react';\nimport { Client } from './interfaces';\n\ninterface UserProps {\n  user: Client;\n}\n\nconst User: React.FC<UserProps> = ({ user }) => (\n  <p className=\"post__author\">\n    <span>{user.name}</span>\n    <br />\n    <span>{user.email}</span>\n    <br />\n    <span>{user.address.city}</span>\n  </p>\n);\n\nexport default User;\n","import React from 'react';\nimport { Commentary } from './interfaces';\n\ninterface CommentProps {\n  comment: Commentary;\n}\n\nconst Comment: React.FC<CommentProps> = ({ comment }) => (\n  <div className=\"comments__item\">\n    <p className=\"comments__text\">{comment.body}</p>\n    <div className=\"comments__author\">\n      <span>{comment.name}</span>\n      <br />\n      <span>{comment.email}</span>\n    </div>\n  </div>\n);\n\nexport default Comment;\n","import React from 'react';\nimport Comment from './Comment';\nimport { Commentary } from './interfaces';\n\ninterface CommentListProps {\n  comments: Commentary[];\n}\n\nconst CommentList: React.FC<CommentListProps> = ({ comments }) => (\n  <div className=\"post__comments comments\">\n    <h2 className=\"comments__title\">Comments:</h2>\n    {comments.map(comment => (\n      <Comment key={comment.id} comment={comment} />\n    ))}\n  </div>\n);\n\nexport default CommentList;\n","import React from 'react';\nimport User from './User';\nimport CommentList from './CommentList';\nimport { NormalizedPost } from './interfaces';\n\ninterface PostProps {\n  post: NormalizedPost;\n}\n\nconst Post: React.FC<PostProps> = ({ post }) => (\n  <article className=\"post__item\">\n    <h2 className=\"post__title\">{post.title}</h2>\n    <p className=\"post__text\">{post.body}</p>\n    <User user={post.user} />\n    <CommentList comments={post.comments} />\n  </article>\n);\n\nexport default Post;\n","import React from 'react';\nimport Post from './Post';\nimport { NormalizedPost } from './interfaces';\n\ninterface PostListProps {\n  posts: NormalizedPost[];\n}\n\nconst PostList: React.FC<PostListProps> = ({ posts }) => (\n  <section className=\"post__list\">\n    {posts.map(post => (\n      <Post key={post.id} post={post} />\n    ))}\n  </section>\n);\n\nexport default PostList;\n","import React, { useState } from 'react';\nimport { DebounceInput } from 'react-debounce-input';\nimport { POSTS_URL, USERS_URL, COMMENTS_URL } from './const';\nimport { loadFromServer } from './api';\nimport { Commentary, NormalizedPost, Post, Client } from './interfaces';\nimport PostList from './PostList';\nimport './App.css';\n\nconst App: React.FC = () => {\n  const [posts, setPosts] = useState<NormalizedPost[]>([]);\n  const [isStarted, setIsStarted] = useState<boolean>(false);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string>('');\n  const [filteredPosts, setFilteredPosts] = useState<NormalizedPost[]>([]);\n\n  const normalizePosts: (\n    postsList: Post[],\n    usersList: Client[],\n    commentsList: Commentary[],\n  ) => {\n    comments: Commentary[];\n    id: number;\n    title: string;\n    body: string;\n    userId: number;\n    user: Client | undefined;\n  }[] = (postsList, usersList, commentsList) =>\n    postsList.map(post => ({\n      ...post,\n      comments: commentsList.filter(comment => comment.postId === post.id),\n      user: usersList.find(user => user.id === post.userId),\n    }));\n\n  const loadPosts: () => void = async () => {\n    try {\n      setIsLoading(true);\n      setError('');\n\n      const [postsList, usersList, commentsList] = await Promise.all([\n        loadFromServer(POSTS_URL),\n        loadFromServer(USERS_URL),\n        loadFromServer(COMMENTS_URL),\n      ]);\n\n      const postsData: any[] = normalizePosts(\n        postsList,\n        usersList,\n        commentsList,\n      );\n\n      setPosts(postsData);\n      setFilteredPosts(postsData);\n      setIsLoading(false);\n      setIsStarted(true);\n    } catch (e) {\n      setError(e.message);\n      setIsLoading(false);\n    }\n  };\n\n  const filterPosts = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const searchQuery = e.target.value.trim().toLowerCase();\n\n    setFilteredPosts(\n      posts.filter(post =>\n        (post.title + post.body).toLowerCase().includes(searchQuery),\n      ),\n    );\n  };\n\n  if (error) {\n    return (\n      <div className=\"post__start\">\n        <span className=\"error\">{error}</span>\n        <button\n          disabled={isLoading}\n          className=\"post__button\"\n          type=\"button\"\n          onClick={loadPosts}\n        >\n          {isLoading ? 'Loading...' : 'Try again'}\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      {isStarted ? (\n        <div className=\"post\">\n          <h1 className=\"title\">Dynamic list of posts</h1>\n          <DebounceInput\n            className=\"post__search\"\n            debounceTimeout={500}\n            placeholder=\"Type to search...\"\n            onChange={filterPosts}\n          />\n          <PostList posts={filteredPosts} />\n        </div>\n      ) : (\n        <div className=\"post__start\">\n          <button\n            disabled={isLoading}\n            className=\"post__button\"\n            type=\"button\"\n            onClick={loadPosts}\n          >\n            {isLoading ? 'Loading...' : 'Load Posts'}\n          </button>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default App;\n","export const POSTS_URL = 'https://jsonplaceholder.typicode.com/posts';\nexport const USERS_URL = 'https://jsonplaceholder.typicode.com/users';\nexport const COMMENTS_URL = 'https://jsonplaceholder.typicode.com/comments';\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}